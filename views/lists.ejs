<%- include("partials/header") -%>
<%- include("partials/side-nav") -%>

    <section class="ftco-content">
        <h2 class="page-title">Python - Lists</h2>
        <nav class="links">
            <button class="btn-links" onclick="pdf_con()">PDF</button>
          <button class="btn-links" onclick="location.href='/decision-making'">Decisions</button>
          <button class="btn-links" onclick="location.href='/loops'">Loops</button>
          <button class="btn-links" onclick="location.href='/numbers'">Numbers</button>
          <button class="btn-links" onclick="location.href='/strings'">Strings</button>
          <button class="btn-links" onclick="location.href='/tuples'">Tuples</button>
          <button class="btn-links" onclick="location.href='/dictionary'">Dictionary</button>
        </nav>
        <p class="content">
            The most basic data structure in Python is the sequence. Each element of a <strong>sequence</strong> is assigned a number - its position or index. The first index is zero, the second index is one, and so forth.
         </p>
         <p class="content">
            Python has six built-in types of sequences, but the most common ones are lists and tuples, which we would see in this tutorial.
         </p>
         <h3 class="subtitle">Python Lists</h3>
         <p class="content">
           The list is a most versatile datatype available in Python which can be written as a list of comma-separated values (items) between square brackets. Important thing about a list is that items in a list need not be of the same type.
         </p>
         <p class="content">
           Creating a list is as simple as putting different comma-separated values between square brackets. For example −
         </p>
         <aside class="code-frame">
             <p class="code">
                 <span class="function">list1</span> = <span class="brackets">[</span><span class="disptxt">'physics', 'chemistry', 1997, 2000</span><span class="brackets">]</span>;<br />
                 <span class="function">list2</span> = <span class="brackets">[</span><span class="disptxt">1, 2, 3, 4, 5</span><span class="brackets">]</span>;<br />
                 <span class="function">list3</span> = <span class="brackets">[</span><span class="disptxt">"a", "b", "c", "d"</span><span class="brackets">]</span><br />
 
             </p>
         </aside>
         <p class="content">
             Similar to string indices, list indices start at 0, and lists can be sliced, concatenated and so on.
         </p>
         <h3 class="subtitle">Accessing Values in Lists</h3>
         <p class="content">
             To access values in lists, use the square brackets for slicing along with the index or indices to obtain value available at that index. For example −
         </p>
         <aside class="code-frame">
             <p class="code">
                 <span class="comment">#!/usr/bin/python<br /><br /> </span><span class="function">list1</span> = <span class="brackets">[</span>
                 <span class="disptxt">'physics'</span>, <span class="disptxt">'chemistry'</span>, <span class="disptxt">1997</span>, <span class="disptxt">2000</span><span class="brackets">]</span>; <br />
                 <span class="function">list1</span> = <span class="brackets">[</span><span class="filename">1</span>, <span class="filename">2</span>, <span class="filename">3</span>, <span class="filename">4</span>,
                  <span class="filename">5</span>, <span class="filename">6</span><span class="brackets">]</span>;<br />
                 <span class="function">print</span> <span class="disptxt">"list1[0]: "</span>, <span class="function">list1</span><span class="brackets">[</span><span class="filename">0</span><span class="brackets">]</span><br />
                 <span class="function">print</span> <span class="disptxt">"list2[1:5]: "</span>, <span class="function">list2</span><span class="brackets">[</span><span class="filename">1:5</span><span class="brackets">]</span><br />
             </p>
         </aside>
         <p class="content">
           When the above code is executed, it produces the following result −
         </p>
         <aside class="code-frame">
           <p class="content">
               List1[0]: physics<br />
               list2[1:5]: [2, 3, 4, 5]<br />
           </p>
         </aside>
         <h3 class="subtitle">Updating Lists</h3>
         <p class="content">
             You can update single or multiple elements of lists by giving the slice on the left-hand side of the assignment operator, and you can add to elements in a list with the append() method. For example −
         </p>
         <aside class="code-frame">
             <p class="code">
               <span class="comment">#!/usr/bin/python<br /><br /> </span>
               <span class="function">list</span> = <span class="brackets">[</span><span class="disptxt">'physics'</span>, <span class="disptxt">'chemistry'</span>, <span class="disptxt">1997</span>, <span class="disptxt">2000</span><span class="brackets">]</span>; <br />
               <span class="function">print</span><span class="disptxt">" Value available at index 2 : "</span><br />
               <span class="function">print</span><span class="function"> list</span><span class="brackets">[</span><span class="filename">2</span><span class="brackets">]</span><br />
               <span class="function">list</span><span class="brackets">[</span><span class="filename">2</span><span class="brackets">]</span> = <span class="filename">2001</span>;<br />
               <span class="function">print</span><span class="disptxt"> "New value available at index 2 : "</span><br />
               <span class="function">print</span><span class="function"> list</span><span class="brackets">[</span><span class="filename">2</span><span class="brackets">]</span>
               </p>
         </aside>
         <p class="content">
           <strong>Note</strong> − append() method is discussed in subsequent section.
         </p>
         <p class="content">
           When the above code is executed, it produces the following result −
         </p>
         <aside class="code-frame">
           <p class="content">
               Value available at index 2 :<br />
               1997<br />
               New value available at index 2 :<br />
               2001<br />
           </p>
         </aside>
         <h3 class="subtitle">Delete List Elements</h3>
         <p class="content">
           To remove a list element, you can use either the del statement if you know exactly which element(s) you are deleting or the remove() method if you do not know. For example −
         </p>
         <aside class="code-frame">
           <p class="code">
           <span class="comment">#!/usr/bin/python<br /><br />
           <span class="function">list</span> = <span class="brackets">[</span><span class="disptxt">'physics'</span>, <span class="disptxt">'chemistry'</span>, <span class="disptxt">1997</span>, <span class="disptxt">2000</span><span class="brackets">]</span>;<br />
           <span class="function">print</span><span class="function"> list1</span><br />
           <span class="function">del</span><span class="function"> list1</span><span class="brackets">[</span><span class="filename">2</span><span class="brackets">]</span><br />
           <span class="function">print</span><span class="disptxt"> print "After deleting value at index 2 : "</span><br />
           <span class="function">print</span><span class="function"> list1</span>
           </p>
         </aside>
         <p class="content">
         When the above code is executed, it produces the following result −
         </p>
         <aside class="code-frame">
             <p class="content">
                 ['physics', 'chemistry', 1997, 2000]<br />
                 After deleting value at index 2 :<br />
                 ['physics', 'chemistry', 2000]<br />
             </p>
         </aside>
         <p class="content">
           <strong>Note</strong> − remove() method is discussed in subsequent section.
         </p>
         <h3 class="subtitle">Basic List Operations</h3>
         <p class="content">
           Lists respond to the + and * operators much like strings; they mean concatenation and repetition here too, except that the result is a new list, not a string.
         </p>
         <p class="content">
           In fact, lists respond to all of the general sequence operations we used on strings in the prior chapter.
         </p>
         <table class="content-table">
             <tr>
                 <th>Python Expression</th>
                 <th>Results</th>
                 <th>Description</th>
             </tr>
             <tr>
                 <td>len([1, 2, 3])</td>
                 <td>3</td>
                 <td>Length</td>
             </tr>
             <tr>
                 <td>[1, 2, 3] + [4, 5, 6]</td>
                 <td>[1, 2, 3, 4, 5, 6]</td>
                 <td>Concatenation</td>
             </tr>
             <tr>
                 <td>['Hi!'] * 4</td>
                 <td>['Hi!', 'Hi!', 'Hi!', 'Hi!']</td>
                 <td>Repetition</td>
 
             </tr>
             <tr>
                 <td>3 in [1, 2, 3]</td>
                 <td>True</td>
                 <td>Membership</td>
 
             </tr>
             <tr>
                 <td>for x in [1, 2, 3]: print x,</td>
                 <td>1 2 3</td>
                 <td>Iteration</td>
 
             </tr>
         </table>
         <h3 class="subtitle">Built-in List Functions & Methods</h3>
         <p class="content">Python includes the following list functions −</p>
         <table class="content-table">
             <tr>
                 <th>Sr.No.</th>
                 <th>Function with Description</th>
             </tr>
             <tr>
                 <td>1.</td>
                 <td>
                     <b>cmp(list1, list2)</b><br>
                     Compares elements of both lists.
                 </td>
             </tr>
             <tr>
                 <td>2.</td>
                 <td>
                     <b>len(list)</b><br>
                     Gives the total length of the list.
                 </td>
             </tr>
             <tr>
                 <td>3.</td>
                 <td>
                     <b>max(list)</b><br>
                     Returns item from the list with max value.
                 </td>
             </tr>
             <tr>
                 <td>4.</td>
                 <td>
                     <b>min(list)</b><br>
                     Returns item from the list with min value.
                 </td>
             </tr>
             <tr>
                 <td>5.</td>
                 <td>
                     <b>list(seq)</b><br>
                     Converts a tuple into list.
                 </td>
             </tr>
           </table>
           <br />
           <p class="content">Python includes following list methods</p>
           <table class="content-table">
               <tr>
                   <th>Sr.No.</th>
                   <th>Methods with Description</th>
               </tr>
               <tr>
                   <td>1.</td>
                   <td>
                       <b>list.append(obj)</b><br>
                       Appends object obj to list
                   </td>
               </tr>
               <tr>
                   <td>2.</td>
                   <td>
                       <b>list.count(obj)</b><br>
                       Returns count of how many times obj occurs in list
                   </td>
               </tr>
               <tr>
                   <td>3.</td>
                   <td>
                       <b>list.extend(seq)</b><br>
                       Appends the contents of seq to list
                   </td>
               </tr>
               <tr>
                   <td>4.</td>
                   <td>
                       <b>list.index(obj)</b><br>
                       Returns the lowest index in list that obj appears
                   </td>
               </tr>
               <tr>
                   <td>5.</td>
                   <td>
                       <b>list.insert(index, obj)</b><br>
                       Inserts object obj into list at offset index
                   </td>
               </tr>
               <tr>
                   <td>6.</td>
                   <td>
                       <b>list.pop(obj=list[-1])</b><br>
                       Removes and returns last object or obj from list
                   </td>
               </tr>
               <tr>
                   <td>7.</td>
                   <td>
                       <b>list.remove(obj)</b><br>
                       Removes object obj from list
                   </td>
               </tr>
               <tr>
                   <td>8.</td>
                   <td>
                       <b>list.reverse()</b><br>
                       Reverses objects of list in place
                   </td>
               </tr>
               <tr>
                   <td>9.</td>
                   <td>
                       <b>list.sort([func])</b><br>
                       Sorts objects of list, use compare func if given
                   </td>
               </tr>
         </table>
         <hr>
         <nav class="page-links">
             <button class="btn-pglinks" onclick="location.href='/strings'"><i class="fa fa-angle-left"></i>Prev Page</button>
             <button class="btn-pglinks">PDF Preview</button>
             <button class="btn-pglinks" onclick="location.href='/tuples'">Next Page<i class="fa fa-angle-right"></i></button>
         </nav>
     </section>
 <%- include ("partials/footer") -%>
