<%- include("partials/header") -%>
<%- include("partials/side-nav") -%>

    <section class="ftco-content">
        <h2 class="page-title">Python - Numbers</h2>
        <nav class="links">
            <button class="btn-links" onclick="pdf_con()">PDF</button>
          <button class="btn-links" onclick="location.href='/decision-making'">Decisions</button>
          <button class="btn-links" onclick="location.href='/loops'">Loops</button>
          <button class="btn-links" onclick="location.href='/strings'">Strings</button>
          <button class="btn-links" onclick="location.href='/lists'">Lists</button>
          <button class="btn-links" onclick="location.href='/tuples'">Tuples</button>
          <button class="btn-links" onclick="location.href='/dictionary'">Dictionary</button>
        </nav>
        <p class="content">
            Number data types store numeric values. They are immutable data types, means that changing the value of a number data type results in a newly allocated object.
         </p>
         <p class="content">
           Number objects are created when you assign a value to them. For example −
         </p>
         <aside class="code-frame">
             <p class="code">
                 <span class="function">var1</span> = <span class="filename">1</span><br />
                 <span class="function">var2</span> = <span class="filename">10</span>
             </p>
         </aside>
         <br />
         <p class="content">
             You can also delete the reference to a number object by using the del statement. The syntax of the del statement is −
         </p>
         <aside class="code-frame">
             <p class="code">
                 <span class="function">del </span><span class="function">var1</span>
                 <span class="brackets">[</span>,<span class="function">var2</span>
                 <span class="brackets">[</span>,<span class="function">var3</span>
                 <span class="brackets">[</span>....,<span class="function">varN</span>
                 <span class="brackets">]]]]</span>
             </p>
         </aside>
         <p class="content">
           You can delete a single object or multiple objects by using the <strong>del</strong> statement. For example −
         </p>
         <aside class="code-frame">
             <p class="code">
                 <span class="function">del </span><span class="function">var</span><br />
                 <span class="function">del </span><span class="function">var_a, </span>
                 <span class="function">var_b </span>
             </p>
         </aside>
         <p class="content">
           Python supports four different numerical types −
         </p>
         <ul class="content-bulletlist">
             <li><strong>int (signed integers)</strong> − They are often called just integers or ints, are positive or negative whole numbers with no decimal point.</li>
             <li><strong>long (long integers )</strong> − Also called longs, they are integers of unlimited size, written like integers and followed by an uppercase or lowercase L.</li>
             <li><strong>float (floating point real values)</strong> − Also called floats, they represent real numbers and are written with a decimal point dividing the integer and fractional parts. Floats may also be in scientific notation, with E or e indicating the power of 10 (2.5e2 = 2.5 x 102 = 250).</li>
             <li><strong>complex (complex numbers)</strong> − are of the form a + bJ, where a and b are floats and J (or j) represents the square root of -1 (which is an imaginary number). The real part of the number is a, and the imaginary part is b. Complex numbers are not used much in Python programming.</li>
         </ul>
         <h3 class="subtitle">Examples</h3>
         <p class="content">
         Here are some examples of numbers
         </p>
         <table class="content-table">
             <tr>
                 <th>int</th>
                 <th>long</th>
                 <th>float</th>
                 <th>complex</th>
             </tr>
             <tr>
                 <td>10</td>
                 <td>51924361L</td>
                 <td>0.0</td>
                 <td>3.14j</td>
             </tr>
             <tr>
                 <td>100</td>
                 <td>-0x19323L</td>
                 <td>15.20</td>
                 <td>45.j</td>
             </tr>
             <tr>
                 <td>-0x260</td>
                 <td>-052318172735L</td>
                 <td>-32.54e100</td>
                 <td>3e+26J</td>
             </tr>
             <tr>
                 <td>0x69</td>
                 <td>-4721885298529L</td>
                 <td>70.2-E12</td>
                 <td>4.53e-7j</td>
             </tr>
             <tr>
                 <td>080</td>
                 <td>0xDEFABCECBDAECBFBAEL</td>
                 <td>32.3+e18</td>
                 <td>.876j</td>
             </tr>
         </table>
         <ul class="content-bulletlist">
             <li>Python allows you to use a lowercase L with long, but it is recommended that you use only an uppercase L to avoid confusion with the number 1. Python displays long integers with an uppercase L.</li>
             <li>A complex number consists of an ordered pair of real floating point numbers denoted by a + bj, where a is the real part and b is the imaginary part of the complex number.</li>
         </ul>
 
         <h3 class="subtitle">Number Type Conversion</h3>
         <p class="content">Python converts numbers internally in an expression containing mixed types to a common type for evaluation. But sometimes, you need to coerce a number explicitly from one type to another to satisfy the requirements of an operator or function parameter.</p>
         <ul class="content-bulletlist">
             <li>Type <strong>int(x)</strong> to convert x to a plain integer.</li>
             <li>Type <strong>long(x)</strong> to convert x to a long integer.</li>
             <li>Type <strong>float(x)</strong> to convert x to a floating-point number.</li>
             <li>Type <strong>complex(x)</strong> to convert x to a complex number with real part x and imaginary part zero.</li>
             <li>Type <strong>complex(x, y)</strong> to convert x and y to a complex number with real part x and imaginary part y. x and y are numeric expressions.</li>
         </ul>
         <h3 class="subtitle">Mathematical Functions</h3>
         <p class="content">Python includes following functions that perform mathematical calculations.</p>
         <table class="content-table">
             <tr>
                 <th>Sr.No.</th>
                 <th>Function & Returns ( description )</th>
             </tr>
             <tr>
                 <td>1.</td>
                 <td>
                     <b>abs(x)</b><br>
                     The absolute value of x: the (positive) distance between x and zero.
                 </td>
             </tr>
             <tr>
                 <td>2.</td>
                 <td>
                     <b>ceil(x)</b><br>
                     The ceiling of x: the smallest integer not less than x
                 </td>
             </tr>
             <tr>
                 <td>3.</td>
                 <td>
                     <b>cmp(x, y)</b><br>
                     -1 if x < y, 0 if x == y, or 1 if x > y
                 </td>
             </tr>
             <tr>
                 <td>4.</td>
                 <td>
                     <b>exp(x)</b><br>
                     The exponential of x: ex
                 </td>
             </tr>
             <tr>
                 <td>5.</td>
                 <td>
                     <b>fabs(x)</b><br>
                     The absolute value of x.
                 </td>
             </tr>
             <tr>
                 <td>6.</td>
                 <td>
                     <b>floor(x)</b><br>
                     The floor of x: the largest integer not greater than x
                 </td>
             </tr>
             <tr>
                 <td>7.</td>
                 <td>
                     <b>log(x)</b><br>
                     The natural logarithm of x, for x> 0
                 </td>
             </tr>
             <tr>
                 <td>8.</td>
                 <td>
                     <b>log10(x)</b><br>
                     The base-10 logarithm of x for x> 0.
                 </td>
             </tr>
             <tr>
                 <td>9.</td>
                 <td>
                     <b>max(x1, x2,...)</b><br>
                     The largest of its arguments: the value closest to positive infinity
                 </td>
             </tr>
             <tr>
                 <td>10.</td>
                 <td>
                     <b>min(x1, x2,...)</b><br>
                     The smallest of its arguments: the value closest to negative infinity
                 </td>
             </tr>
             <tr>
                 <td>11.</td>
                 <td>
                     <b>modf(x)</b><br>
                     The fractional and integer parts of x in a two-item tuple. Both parts have the same sign as x. The integer part is returned as a float.
                 </td>
             </tr>
             <tr>
                 <td>12.</td>
                 <td>
                     <b>pow(x, y)</b><br>
                     The value of x**y.
                 </td>
             </tr>
             <tr>
                 <td>13.</td>
                 <td>
                     <b>round(x [,n])</b><br>
                     <strong>x</strong> rounded to n digits from the decimal point. Python rounds away from zero as a tie-breaker: round(0.5) is 1.0 and round(-0.5) is -1.0.
                 </td>
             </tr>
             <tr>
                 <td>14.</td>
                 <td>
                     <b>sqrt(x)</b><br>
                     The square root of x for x > 0
                 </td>
             </tr>
         </table>
         <hr>
         <nav class="page-links">
             <button class="btn-pglinks" onclick="location.href='/loops'"><i class="fa fa-angle-left"></i>Prev Page</button>
             <button class="btn-pglinks">PDF Preview</button>
             <button class="btn-pglinks" onclick="location.href='/strings'">Next Page<i class="fa fa-angle-right"></i></button>
         </nav>
     </section>
 <%- include ("partials/footer") -%>
